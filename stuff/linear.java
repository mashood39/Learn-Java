package stuff;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Scanner;
import java.util.Stack;

public class linear {

    public static void main(String[] args) {
        // linearSearch();
        // write a program to replace all negative values to * in an array

        // negative();
        // negative2();

        // string reverse
        // reverse();

        // sort();
        // construct java logic to seggregate odd numbers in one array and even numbers
        // in other and
        // and found out repetation of any

        // sample();

        // monotonic array is the total increment or decrement values is the same as the
        // difference between the first and last value of array

        // construct

        // monotonic();

        // exponent();

        // twoSum();

        // write a java code to find the number of prime which exist between two inputs
        // and push all prime numbers to the new array
        // prime();

        // find the smallest of five given elements using ternary operator
        // second largest element in given set of array
        // smallestoffive();
        // smallestoffive1();

        // secondLargerst();
        // secondLargerst2();

        // find the number of digits and reverse the number without using the built in
        // function

        // number();
        // number2();

        // find the fare price
        // fare();

        // write a java program to perform addition of two numbers without using
        // arithmetic operators
        // addition();

        // organize();

        // organize1();

        // anagram();

        // series1();

        // pattern1();

        // pattern2();

        // pattern3();

        // fobonacci();

        // 69. Sqrt(x)

        // 125. A phrase is a palindrome if, after converting all uppercase letters into
        // lowercase letters and removing all non-alphanumeric characters, it reads the
        // same forward and backward. Alphanumeric characters include letters and
        // numbers.

        // /*389. You are given two strings s and t.

        // String t is generated by random shuffling string s and then add one more
        // letter at a random position.Return the letter that was added to t

        // 409 . longest palindrome

        // pattern4();

        // pattern5();

        // pattern6();

        // stack();

        // stack1();

        // graph();

        // linked_list();

        // palindrome();
        // listoflist();

        // getRow(3);

        // moveZeros();

        // moveZeroes1();

        // hashMap();

        // stringbuilder();

        // sampleString();

        // character();

        // array();
        // System.out.println(passThePillow(10, 22));

        // string();

        // arraylist();

        // todarray();

        // sequence();

        // length();

        // minOperations();]

        // pop();

        // System.out.println(reverseParentheses("f(ul)ao(t(y)qbn)()sj"));

        // "fluaonbqytsj"

        // compare();

        // collecions();

        // collection2();

        // hash();

        // one();
        // boolean a = true;
        // boolean b = true;

        // two(a);

        // three();

        // System.out.println(four());

        // five();

        // six();

        // seven();

        // eight();

        // nine();

        // ten();

        // leven();

        // twelve();

        // thirteen();

        // nextGreaterElement();

        // System.out.println(longestPalindrome("abccccdd"));

        // int result ;

        // result = Math.max(result, 10 );

        // System.out.println(result);

        // fun();

        matrix();

    }

    static void matrix(){
        int arr[][] = {
            {1,2,3},
            {4,5,6},
            {7,8,9}
        };

        for(int i = 0;i < arr.length;i++){
            for(int j = 0;j < arr[0].length;j++){
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }

        System.out.println("transpose");

        for(int i = 0;i < arr.length;i++){
            for(int j  = 0;j < arr[0].length;j++){
                System.out.print(arr[j][i] + " ");
            }
            System.out.println();
        }

        System.out.println("next");

        for(int i = 0;i < arr.length;i++){
            for(int j = i;j < arr[0].length;j++){
                int temp = arr[i][j];
                arr[i][j] = arr[j][i];
                arr[j][i] = temp;
            }
        }

        for(int i = 0;i < arr.length;i++){
            for(int j = 0;j < arr[0].length;j++){
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }
    }

    static void fun() {
        String str = "a1b14";

        StringBuilder sb = new StringBuilder();
        StringBuilder num = new StringBuilder();

        for (int i = 0; i < str.length(); ) {
            if (Character.isLetter(str.charAt(i))) {
                sb.append(str.charAt(i));
                i++;
            } else if (Character.isDigit(str.charAt(i))) {
                num.setLength(0);  // Clear previous number
                while (i < str.length() && Character.isDigit(str.charAt(i))) {
                    num.append(str.charAt(i));
                    i++;
                }

                String n = num.toString();
                int number = Integer.parseInt(n);

                // Repeat the last character 'number' times
                char lastChar = sb.charAt(sb.length() - 1);
                for (int j = 1; j < number; j++) {
                    sb.append(lastChar);
                }
            }
        }

        System.out.println(sb.toString());  // Output: abb........bbbbbb
    }

    static int longestPalindrome(String s) {

        int[] arr = new int[256];
        int longest = 0;
        int flag = 0;

        for (int i = 0; i < s.length(); i++) {
            arr[s.charAt(i)]++;
            System.out.println(arr[i]);
        }

        System.out.println(arr[69]);

        // for(int i = 0;i < s.length(); i++){
        // if(arr[i] % 2 == 0){
        // longest = longest + arr[i];
        // }

        // else{
        // if(flag == 0){
        // longest = longest + arr[i];
        // flag = 1;
        // }
        // else{
        // longest = longest + arr[i] - 1;
        // }
        // }
        // }

        return longest;

    }

    static void nextGreaterElement() {

        int nums1[] = { 2, 4 };
        // int nums1[] = {1,3,5,2,4};
        // int nums2[] = {5,4,3,2,1};
        int nums2[] = { 1, 2, 3, 4 };

        int[] result = new int[nums1.length];
        int k = 0;

        int flag = 0;
        for (int i = 0; i < nums1.length; i++) {
            for (int j = 0; j < nums2.length; j++) {
                if (nums1[i] == nums2[j]) {
                    flag = 1;
                }
                if (flag == 1) {
                    if (nums1[i] < nums2[j])
                        flag = 0;
                    result[k] = nums2[j];
                    k++;
                    break;

                }
            }
            if (flag == 1) {
                result[k] = -1;
                k++;
            }

        }

        for (int i = 0; i < result.length; i++) {
            System.out.print(result[i] + " ");
        }

    }

    static void thirteen() {

        int numbers[] = { 2, 7, 11, 15 };
        int target = 9;

        int left = 0;
        int right = numbers.length - 1;
        int arr[] = new int[2];

        while (left <= right) {

            if (numbers[left] + numbers[right] == target) {
                arr[0] = left + 1;
                arr[1] = right + 1;
            }

            else if (numbers[left] + numbers[right] > target) {
                right--;
            }

            else if (numbers[left] + numbers[right] < target) {
                left++;
            }
        }

        System.out.println(arr[0]);
        System.out.println(arr[1]);
    }

    static void twelve() {

        int[] nums = { 1, 1, 1 };

        int count = 0;
        int k = 1;
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 1) {
                count++;
            }
            if (k == 1 && nums[i] == 0) {
                k--;
            }

            max = Math.max(count, max);
        }

        System.out.println(max);
    }

    static void leven() {

        // String str = 1 + "abc" + 5;
        // System.out.println(str);

        // System.out.println(1+ "2" );

        // char ch = 'k';

        // System.out.println(ch + "str" + 1);
        // System.out.println( '2' + '3') ;\

        // int count = 3;

        // System.out.println("count");

        char[] arr = new char[5];
        arr[0] = 65;
        System.out.println(arr[0]);
    }

    static void ten() {

        int num = 107;

        System.out.println((char) num);

        // char c = 'k';

        // System.out.println(c + 10);

        // System.out.println((int)c);
    }

    static void nine() {

        String s = "abcd";
        String t = "abcd";

        char arr1[] = new char[s.length() + 2];

        System.arraycopy(s.toCharArray(), 0, arr1, 0, s.length());

        // for(int i = 0;i < arr1.length;i++){
        // System.out.print(arr1[i]);
        // }

        char arr2[] = t.toCharArray();

        Arrays.sort(arr1);
        Arrays.sort(arr2);

        // // if(arr1[1] != arr2[1]){
        // // // System.out.println(arr1[1]);
        // // System.out.println("they are not equal");
        // // }
        // // else{
        // // System.out.println("they are equal");
        // // }

        // // int i;
        // // for (int i = 0; i < arr2.length; i++) {
        // // if (arr1[i] != arr2[i]) {
        // // System.out.println("they are not equal");
        // // // break;
        // // }
        // // else{
        // // System.out.println("they are equal");
        // // // break;
        // // }

        // // }

        boolean flag = true;
        int i;
        for (i = 0; i < arr2.length; i++) {
            if (arr1[i] != arr2[i]) {
                flag = false;
                break;
            }
        }

        System.out.println(i);

        if (flag) {

            System.out.println("they are equal");
        } else {
            System.out.println(arr2[i]);
            System.out.println("they are not equal");
        }

        // System.out.println(arr2[i]);

    }

    static void eight() {

        String s = "mashood";
        String t = "mashood";

        char arr1[] = s.toCharArray();
        char arr2[] = t.toCharArray();

        // int arr1[] = {1,2};
        // int arr2[] = {0,2};

        // if(arr1[1] != arr2[1]){
        // System.out.println("hello");
        // }
        // else{
        // System.out.println("hi");
        // }

        int i = 0;
        for (i = 0; i < arr1.length; i++) {
            if (arr1[i] != arr2[i]) {
                System.out.println("hell");
            }
        }

        // System.out.println(arr2[i]);
    }

    static void seven() {

        String str = "mashood";

        char arr[] = new char[str.length() + 1];
        System.arraycopy(str.toCharArray(), 0, arr, 0, str.length());

        System.out.println(arr.length);
        System.out.println(arr[6]);

        // arr[arr.length + 1] = 'k';

        // for(int i = 0;i < arr.length;i++){
        // System.out.println(arr[i]);
        // }
        // System.out.println(str);
    }

    static void six() {
        int[] nums = { 0, 0, 1, 1, 1, 2, 2, 3, 3, 4 };
        int k = 1;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] != nums[i - 1]) {
                nums[k] = nums[i];
                k++;
            }
        }

        // System.out.println(k);

        for (int i = 0; i < nums.length; i++) {
            System.out.println(nums[i]);
        }
    }

    static void five() {

        int nums[] = { 0, 0, 1, 1, 1, 2, 2, 3, 3, 4 };

        int res[] = new int[nums.length];

        int k = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            if (nums[i] != nums[i + 1]) {
                res[k] = nums[i];
                k++;
            }

        }

        res[k] = nums[nums.length - 1];

        for (int i = 0; i < res.length; i++) {
            System.out.println(res[i]);
        }
    }

    static int four() {
        return 5 - 3;
    }

    static void three() {

        String arr[] = { "flower", "flow", "flight" };
        // System.out.println(str.length);

        String s = arr[0].substring(0, 2);
        System.out.println(s);
        // Arrays.sort(arr);
        // System.out.println(arr[2]);
    }

    static void two(boolean d) {

        if (d && true) {
            System.out.println("hello");
        }

        boolean k = false;
        two(k);
    }

    static void one() {
        HashSet<Integer> set = new HashSet<>();

        set.add(1);
        set.add(3);
        System.out.println(set.add(3));
        System.out.println(set.add(8));
        // System.out.println(set);

    }

    static void hash() {

        HashMap<String, Integer> map = new HashMap<>();

        map.put("a", 10);
        map.put("b", 20);
        map.put("c", 30);
        map.put("c", 30);

        System.out.println(map);
    }

    static void collection2() {

        List<Integer> list = new ArrayList<>();
        int arr[] = { 3, 5, 2, 6 };

        for (int i = 0; i < 4; i++) {
            list.add(i);
        }

        Collections.sort(list, (a, b) -> Integer.compare(arr[a], arr[b]));

        System.out.println(list);

        // for(int i = 0;i < arr.length;i++){
        // System.out.print(arr[i] + " ");
        // }
    }

    static void collecions() {

        List<Integer> list = new ArrayList<>();

        list.add(2);
        list.add(7);
        list.add(1);
        list.add(-77);

        System.out.println(list);

        Collections.sort(list);

        System.out.println(list);

        // Collections.sort(arr);
    }

    static void compare() {
        int a = 80;
        int b = 30;

        System.out.println(Integer.compare(a, b));
        System.out.println(Integer.compare(20, 50));
    }

    public static String reverseParentheses(String s) {

        Stack<Character> stack = new Stack<>();

        String res = "";
        String ans = "";

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) != ')') {
                stack.push(s.charAt(i));
            } else {
                Character arr[] = new Character[s.length()];
                int j = 0;
                while (stack.peek() != '(') {
                    arr[j] = stack.pop();
                    j++;
                }
                stack.pop();

                j = 0;

                while (arr[j] != null) {
                    stack.push(arr[j]);
                    j++;
                }
            }
        }

        int k = 0;
        while (!stack.isEmpty()) {
            res = res + stack.peek();
            stack.pop();
            k++;
        }

        for (int i = res.length() - 1; i >= 0; i--) {
            ans = ans + res.charAt(i);
        }
        return ans;
    }

    public static void pop() {

        // Stack<Character> st = new Stack<>();

        // st.push('a');
        // st.push('b');
        // st.push('c');

        // System.out.println(st);

        // char a = st.pop();
        // System.out.println(a);
        // System.out.println(st);

        // String arr[] = new String[5];

        // System.out.println(arr[2]);

        String name = "mashood";
        char ch = 'k';

        name = name + ch;

        System.out.println(name);

    }

    public static void minOperations() {

        String[] logs = { "./", "../", "./" };
        int child = 0;

        for (int i = 0; i < logs.length; i++) {
            if (logs[i].equals("../")) {
                if (child != 0) {
                    child--;
                }

            } else if (logs[i].equals("./")) {
                continue;
            } else {
                child++;
            }
        }

        System.out.println(child);
    }

    static void length() {

        int arr1[] = { 1, 23, 5 };
        System.out.println(arr1.length);

        String arr2[] = { "apple", "mango", "potato", "cow", "rat" };
        System.out.println(arr2.length);
        System.out.println(arr2[2]);
        if (arr2[3] == "cow") {
            System.out.println("hello world");
        }
    }

    static void sequence() {

        for (int i = 0; i < 6; i++) {
            if (i == 3) {
                continue;
            }
            System.out.println(i);
        }
    }

    static void todarray() {

        int[][] arr = new int[5][6];
        // int arr[] = new int[5];
        System.out.println(arr[0][10]);
    }

    static void arraylist() {

        List<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(3);
        list.remove(0);
        System.out.println(list.get(0));
        System.out.println(list);
    }

    static void string() {

        int num = 10;

        System.out.println(num);

        System.out.println(num + 40);

        String sample = String.valueOf(num);
        System.out.println(sample);
        System.out.println(sample + 40);
    }

    public static int passThePillow(int n, int time) {

        if (time < n)
            return time + 1;

        int num = time % n - 1;
        int num2 = time / n - 1;

        if (num2 % 2 == 0) {
            return num + 1;
        }

        else {
            return n - num;
        }

    }

    static void array() {
        // int store[] = new int[];

        // List<Integer> list = Arrays.asList(1,2,4);

        // System.out.println(list.get(0));
        // System.out.println(list.size());

        // int a = 'a';
        // System.out.println(a);

        int arr[] = new int[200];

        System.out.println(arr['a']);

        // arr['a'] = 5;
        // String s = "mashood";
        // System.out.println(arr['a']);
        // System.out.println(arr[97]);
        // System.out.println(arr[s.charAt(2)]);

        // System.out.println(store[4]);
        // store[0] = 1;

    }

    static void character() {

        int a = 5;

        System.out.println((char) (a + 'A'));

        // String name = "ma7shood";
        // System.out.println(name);

        // int num = name.charAt(2) - 1;
        // System.out.println(num);

        // System.out.println(name.toUpperCase());

        // if(name.charAt(1) > 54){
        // System.out.println("hi");
        // }

        // char z = 'a';

        // // int carry = 0;

        // System.out.println(name.charAt(3) - '0');
        // System.out.println(name.charAt(3));
        // // System.out.println('a' - '0');
    }

    static void sampleString() {

        String str = "mashood";

        for (char c : str.toCharArray()) {
            System.out.println(c);
        }

    }

    static void stringbuilder() {

        StringBuilder s = new StringBuilder("");
        s.append(1).append(2).append("vzx");
        System.out.println(s);
    }

    static void hashMap() {

        HashMap<Integer, Integer> map = new HashMap<>();

        map.put(1, 10);
        map.put(2, 20);
        map.put(3, 30);
        map.put(4, 40);
        map.put(5, 50);

        System.out.println(map);

        System.out.println(map.containsKey(20));
        System.out.println(map.get(40));
    }

    public static void moveZeroes1() {

        int[] nums = { 0, 1, 0, 3, 12 };

        int left = 0;
        int right = nums.length - 1;

        while (left < right) {
            if (nums[left] == 0 && nums[right] != 0) {
                int temp = nums[left];
                nums[left] = nums[right];
                nums[right] = temp;
                left++;
                right--;
            }
        }

        for (int i = 0; i < nums.length; i++) {
            System.out.print(nums[i] + " ");
        }
    }

    public static void moveZeros() {

        int[] nums = { 0, 1, 0, 3, 12 };
        for (int i = 0; i < nums.length; i++) {
            System.out.print(nums[i] + " ");
        }
        int left = 0;

        for (int right = 0; right < nums.length; right++) {
            if (nums[right] != 0) {
                int temp = nums[right];
                nums[right] = nums[left];
                nums[left] = temp;
                left++;
            }
        }
        System.out.println();
        for (int i = 0; i < nums.length; i++) {
            System.out.print(nums[i] + " ");
        }
    }

    public static void getRow(int rowIndex) {

        List<List<Integer>> pascal = new ArrayList<>();
        System.out.println(pascal.size());

        for (int i = 0; i <= rowIndex; i++) {
            List<Integer> row = new ArrayList<>();

            for (int j = 0; j <= i; j++) {
                if (j == 0 || j == i) {
                    row.add(1);
                } else {
                    row.add(pascal.get(i - 1).get(j - 1) + pascal.get(i - 1).get(j));
                }
            }
            pascal.add(row);
        }

        List<Integer> list = pascal.get(rowIndex);

        System.out.println(list);

    }

    static void listoflist() {

        List<List<Integer>> res = new ArrayList<>();

        List<Integer> list1 = new ArrayList<>();
        List<Integer> list2 = new ArrayList<>();
        List<Integer> list3 = new ArrayList<>();

        list1.add(1);
        list1.add(2);

        list2.add(3);
        list2.add(4);

        list3.add(5);
        list3.add(6);

        System.out.println(list1);
        System.out.println(list2);
        System.out.println(list3);

        res.add(list1);
        res.add(list2);
        res.add(list3);

        System.out.println(res);
        System.out.println(res.get(1));
        System.out.println(res.size());

        // int element = res.get(1).get(0);
        // System.out.println(element);

        // List<List<Integer>> res1 = new ArrayList<>();
        // res1.add(List.of(1));
        // res1.add(List.of(2));

        // System.out.println(res1);

        // System.out.println(list.get(1));

        // res.add(List.of(1,2));
        // res.add(List.of(3));

        // System.out.println(res);

    }

    static void palindrome() {

        // int roads[][] = { { 0,1 }, { 1,2 }, { 2, 3 } ,{ 0,2}};

        int[] degree = new int[5];

        for (int i = 0; i < 5; i++) {
            System.out.println(degree[i]);
        }

        // for (int[] edge : roads) {
        // // System.out.println(edge[0]);

        // degree[edge[0]]++;
        // degree[edge[1]]++;
        // // System.out.println(degree[edge[0]]++);
        // // System.out.println(degree[edge[1]]++);
        // }

        // for(int i = 0; i < 8;i++){
        // System.out.println(degree[i]);
        // }

    }

    static void graph() {
        int edges[][] = { { 1, 2 },
                { 3, 4 },
                { 5, 6 },
                { 45, 8 } };

        System.out.println(edges[0][1]);
    }

    // static void stack1(){

    // Stack s = new Stack(5);

    // }

    static void stack() {

        Scanner sc = new Scanner(System.in);

        int arr[] = new int[5];
        int top = 0;

        sc.close();

        while (true) {

            System.out.println("Enter the choice :\n1. push\n2. pop\n3. peak\n4. dispaly\n");
            int choice = sc.nextInt();
            if (choice == 1) {
                push(arr, top);
            } else if (choice == 2) {
                // pop();
            } else if (choice == 3) {
                // peak();
            } else if (choice == 4) {
                // display();
            } else {
                System.out.println("Enter the correct choice");
            }
        }

    }

    static void push(int arr[], int top) {

        Scanner sc = new Scanner(System.in);

        System.out.println("enter the elemet to insert :");
        arr[top] = sc.nextInt();

        sc.close();
    }

    static void pattern6() {

        int row = 10;

        for (int i = 1; i <= row; i++) {
            for (int j = 0; j <= row - i; j++) {
                System.out.print("*");
            }
            System.out.println();
            for (int k = 0; k < row - i; k++) {
                System.out.print("+");
            }

        }
    }

    static void pattern5() {
        int row = 10;

        for (int i = 1; i <= row; i++) {
            for (int j = row - i - 1; j >= 0; j--) {
                System.out.print(" ");
            }
            for (int k = 0; k < i; k++) {
                System.out.print("* ");
            }

            System.out.println();
        }

    }

    static void pattern4() {

        int row = 5;

        for (int i = 1; i <= row; i++) {
            for (int j = row - i - 1; j >= 0; j--) {
                System.out.print("  ");
            }
            for (int k = 0; k < i; k++) {
                System.out.print("* ");
            }

            System.out.println();
        }

    }

    static void fibonacci() {
        // series = {0,1,1,2,3,5,8,13};

    }

    static void pattern2() {
        int rows = 5;
        int count = 1;

        for (int i = 1; i < rows; i++) {
            for (int j = 1; j <= i; j++) {
                System.out.print(count++ + " ");
            }
            System.out.println();
        }
    }

    static void pattern1() {

        int rows = 5;

        for (int i = 1; i < rows; i++) {
            for (int j = 1; j < rows; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    static void series1() {
        int num = 12;

        System.out.print(1 + " ");

        for (int i = 2; i < num + 1; i++) {
            System.out.print(i * 2 + " ");
        }
    }

    static void anagram() {

    }

    static void organize() {

        // int arr[] = {0,-4,1,-5,0,3,2,100,55,56,101};
        // int arr[] = {-5 ,-4, -458, -777 ,2 ,3,3,1,7,8,1, 3, 1254, 785, 0, 0, 0 ,0,
        // 0};
        // int arr[] = {-5, -4,0,1,5,2};
        // int arr[] = {1,0,0,10,5,3,8,9,0,0};
        int arr[] = { 0, 3, -1, 4, 0, 4, 2 };

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {

                if ((arr[i] > 0 && arr[j] < 0) || (arr[i] == 0 && arr[j] != 0)) {
                    int temp = arr[j];
                    arr[j] = arr[i];
                    arr[i] = temp;
                }
            }
        }

        for (int i = 0; i < arr.length; i++) {
            System.out.print(arr[i] + " ");
        }

    }

    static void addition() {
        int num1 = 59;
        int num2 = 6;

        for (int i = 0; i < num2; i++) {
            num1++;
        }

        System.out.println(num1);

    }

    static void fare() {
        Scanner sc = new Scanner(System.in);
        int distance = sc.nextInt();

        sc.close();
    }

    static void number2() {
        int num = 125432;

        String str = String.valueOf(num);
        System.out.println(str.length());
    }

    static void number() {

        int num = 1212823;
        int rev = 0;
        int count = 0;

        while (num > 0) {
            count++;
            int rem = num % 10;
            rev = rev * 10 + rem;
            num = num / 10;
        }

        System.out.println(rev);
        System.out.println(count);
    }

    static void smallestoffive() {
        int a = 100, b = 20, c = 3, d = 400, e = 5;

        int res = (a < b) && (a < c) && (a < d) && (a < e) ? a
                : (b < a) && (b < c) && (b < d) && (b < e) ? b
                        : (c < a) && (c < b) && (c < d) && (c < e) ? c
                                : (d < a) && (d < b) && (d < c) && (d < e) ? d : e;

        System.out.println(res);

    }

    static void secondLargerst2() {

        int arr[] = { 1, 2, 3, 4, 5 };

        int largest = Integer.MIN_VALUE;
        int secondLargest = Integer.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            largest = Math.max(largest, arr[i]);
        }

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < largest) {
                secondLargest = Math.max(secondLargest, arr[i]);
            }

        }

        System.out.println(secondLargest);
    }

    static void secondLargerst() {
        int[] arr = { 1, 23, 3, 4, 5, 22 };

        Arrays.sort(arr);

        System.out.println(arr[arr.length - 2]);

    }

    static void prime() {

        int num1 = 100;
        int num2 = 200;

        for (int i = num1; i < num2; i++) {
            boolean k = isPrime(i);

            if (k == true) {
                System.out.println(i);
            }
        }
    }

    static boolean isPrime(int i) {
        for (int m = 2; m < i; m++) {
            if (i % m == 0) {
                return false;
            }
        }

        return true;
    }

    static void twoSum() {
        int[] arr = { 1, 2, 3, 4, 5, 6 };

        int target = 3;

        for (int i = 0; i < arr.length; i++) {
            for (int j = i; j < arr.length; j++) {
                if (arr[i] + arr[j] == target) {
                    System.out.println(i + " " + j);
                    return;
                }
            }

        }

        System.out.println("not found");

    }

    static void exponent() {

        int val = 5;
        int exp = -4;

        double result = 1;

        for (int i = 0; i < Math.abs(exp); i++) {
            result = result * val;
        }

        if (exp < 0) {
            result = 1 / result;
            System.out.println(result);
        } else {
            System.out.println(result);
        }

    }

    static void monotonic() {
        int[] arr = { 5, 4, 3, 2 };
        int sum = 0;

        for (int i = 0; i < arr.length - 1; i++) {
            sum = sum + (arr[i] - arr[i + 1]);
        }

        System.out.println(sum);
    }

    static void sample() {

        int[] arr = { 1, 2, 3, 4, 5, 6, 10, 15, 12, 14, 15, 199 };

        int[] even = new int[arr.length];

        int[] odd = new int[arr.length];

        int k = 0; // even
        int j = 0; // odd

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 0) {
                even[k] = arr[i];
                k++;
            } else {
                odd[j] = arr[i];
                j++;
            }
        }

        System.out.println("even numbers ");

        for (k = 0; k < even.length; k++) {
            System.out.println(even[k]);
        }

        System.out.println("odd numbers ");

        for (j = 0; j < odd.length; j++) {
            System.out.println(odd[j]);
        }

    }

    static void sort() {
        int[] arr = { 1, 2, 34, 5, 8, 17 };

        for (int i = 0; i < arr.length / 2; i++) {
            if (arr[i] > arr[i + 1]) {
                int temp = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp;
            }
        }

        for (int i = arr.length / 2; i < arr.length - 1; i++) {
            if (arr[i] < arr[i + 1]) {
                int temp2 = arr[i];
                arr[i] = arr[i + 1];
                arr[i + 1] = temp2;
            }
        }

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }

    static void reverse() {
        String name = "mashood";
        String res = "";

        for (int i = name.length() - 1; i >= 0; i--) {
            res = res + name.charAt(i);
        }
        System.out.println(res);

        return;

    }

    static void negative2() {
        String[] str = { "1", "-8", "3" };

        for (int i = 0; i < str.length; i++) {
            if (Integer.parseInt(str[i]) < 0) {
                str[i] = "*";
            }
        }

        for (int i = 0; i < str.length; i++) {
            System.out.println(str[i]);
        }
    }

    static void negative() {
        int[] arr = { 1, -4, 3, -8, 5 };

        String[] str = new String[arr.length];

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 0) {
                str[i] = "*";
            } else {
                str[i] = String.valueOf(arr[i]);
            }
        }

        for (int i = 0; i < arr.length; i++) {
            System.out.println(str[i]);
        }

        return;

    }

    public static void linearSearch() {

        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of elemets ");
        int num = sc.nextInt();

        System.out.println("Enter the array elements");
        int[] arr = new int[num];

        for (int i = 0; i < num; i++) {
            arr[i] = sc.nextInt();
        }

        System.out.println("enter the element to search");
        int key = sc.nextInt();

        sc.close();

        for (int i = 0; i < arr.length; i++) {

            if (arr[i] == key) {

                System.out.println(key + " found");
                return;
            }

        }
        System.out.println("not found");

    }
}
